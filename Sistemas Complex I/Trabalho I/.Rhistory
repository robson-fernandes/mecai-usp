f=outer(x,y,function(x,y)cos(y)/(1+xˆ2));
persp(x,y,f,theta=30,phi=40)
persp(x,y,f,theta=30,phi=40)
?persp
x=seq(-pi,pi,length=50)
y = x;
f=outer(x,y,function(x,y)cos(y)/(1+xˆ2));
?outer
x=seq(-pi,pi,length=50)
y = x;
f=outer(x,y,function(x,y) cos(y)/(1+x^2) );
persp(x,y,f,theta=30,phi=40)
x <- c(1,3,2,5)
x
x = c(1,6,2)
y = c(1,4,3)
x = c(1,6,2)
y = c(1,4,3)
length(x)
x = c(1,6,2)
y = c(1,4,3)
x + y
x = matrix(data=c(1,2,3,4), nrow=2, ncol=2)
x = matrix(data=c(1,2,3,4), nrow=2, ncol=2)
x
x = seq(1,5,length=9)
x
seq(-2,2,by=0.3)
x=1:10
x
x=rnorm(100,mean=0,sd=2)
x=rnorm(100,mean=0,sd=2)
shapiro.test(x)
x1= c(1,2,3,4)
shapiro.test(x1)
x1= c(1,2,3,100)
shapiro.test(x1)
x=rnorm(100,mean=0,sd=2)
y=rnorm(100,mean=5,sd=4)
plot(x,y)
hist(x)
x=rnorm(100,mean=0,sd=2)
y=rnorm(100,mean=5,sd=4)
plot(x,y)
x=rnorm(100,mean=0,sd=2)
y=rnorm(100,mean=5,sd=4)
plot(x,
y,
xlab="Rótulo - x",
ylab="Rótulo - y",
main="Título do Gráfico")
x=seq(-pi,pi,length=50)
y = x;
f=outer(x,y,function(x,y)cos(y)/(1+x^2));
persp(x,y,f,theta=30,phi=40)
x
y
x=seq(-pi,pi,length=50)
y = x;
f=outer(x,y,function(x,y)cos(y)/(1+x^2));
persp(x,y,f,theta=30,phi=40)
x = seq(-pi,pi,length=50)
y = x
f = outer(x,y,function(x,y)cos(y)/(1+x^2))
persp(x,y,f,theta=30,phi=40)
x = seq(-pi,pi,length=50)
y = x
f = outer(x,y,
function(x,y) {
cos(y)/(1+x^2)
})
persp(x,y,f,theta=30,phi=40)
x = seq(-pi,pi,length=50)
y = x
f = outer(x,
y,
function(x,y)
{
cos(y)/(1+x^2)
})
persp(x,y,f,theta=30,phi=40)
x = seq(-pi,pi,length=50)
y = x
z = outer(x,
y,
function(x,y)
{
cos(y)/(1+x^2)
})
persp(x,y,z,theta=30,phi=40)
setwd("~/Desktop/teste")
data = read.table("data.txt")
data
data = read.table("data.txt")
data[,'V1']
data = read.table("data.txt")
#Lendo todos os dados
data
#Lendo os dados da coluna V1
data[,'V1']
data[,'V1']
data[,'V2']
data = read.csv("data.csv", sep=";", header = F)
data
data = read.csv("data.csv", sep=";", header = F)
#Lendo todos os dados
data
#Lendo os dados da coluna V1
data[,'V1']
data = read.csv("data.csv", sep=";", header = F)
#Lendo todos os dados
data
#Lendo os dados da coluna V1
data[,'V1']
data = read.csv("data.csv", sep=";", header = F)
#Lendo todos os dados
data
#Lendo os dados da coluna V1
data[,'V1']
data = read.csv("data.csv", sep=";", header = F)
#Lendo todos os dados
data
#Lendo os dados da coluna V1
data[,'V1']
data = read.csv("data.csv", sep=";", header = F)
#Lendo todos os dados
data
#Lendo os dados da coluna V1
data[,'V1']
data = read.csv("data.csv", sep=";", header = F)
#Lendo todos os dados
data
#Lendo os dados da coluna V1
data[,'V1']
data("iris")
x = iris$Sepal.Width
m = mean(x)
data("iris")
x = iris$Sepal.Width
m = mean(x)
m
data("iris")
x = iris$Sepal.Width
#Média
mean(x)
#Mediana
mean(x)
#Variância
var(x)
#Desvio Padrão
sd(x)
data("iris")
x = iris$Sepal.Width
#Média
mean(x)
#Mediana
median(x)
#Variância
var(x)
#Desvio Padrão
sd(x)
summary(iris)
data("iris")
summary(iris)
summary(iris)
summary(iris)
summary(iris)
summary(iris)
data("iris")
summary(iris)
data("iris")
pie(table(iris$Species))
(table(iris$Species)
table(iris$Species)
table(iris$Species)
data("iris")
#Agrupamento por espécie
especie.group = table(iris$Species)
pie(especie.group)
data("iris")
#Agrupamento por espécie
especie.group = table(iris$Species)
pie(especie.group)
data("iris")
#Agrupamento por espécie
especie.group = table(iris$Species)
#Plot Setores
pie(especie.group)
data("iris")
#Histograma
hist(iris$Sepal.Length)
iris$Sepal.Length
shapiro.test(iris$Sepal.Length)
data("iris")
#Histograma
hist(iris$Sepal.Length)
data("iris")
#Histograma
hist(iris$Sepal.Length)
hist(iris$Sepal.Length, main="Lenght of sepal",breaks=1:10, border="blue", col="green", prob = TRUE, xlab="centimeters")
lines(density(iris$Sepal.Length))
hist(iris$Sepal.Length,
main="Comprimento da Sépala",
breaks=1:10,
border="blue",
col="green",
prob = TRUE,
ylab = "Densidade",
xlab="Centímetros")
lines(density(iris$Sepal.Length))
data("iris")
#Histograma
hist(iris$Sepal.Length)
data("iris")
#Histograma do comprimento da sepala: Podemos variar a largura
#das caixas e estimar a densidade:
hist(iris$Sepal.Length,
main="Comprimento da Sépala",
breaks=1:10,
border="blue",
col="green",
prob = TRUE,
ylab = "Densidade",
xlab="Centímetros")
lines(density(iris$Sepal.Length))
iris$Species
species <- as.numeric(iris$Species)
species
iris[,-5]
iris
data("iris")
#Transformação de Dados
species <- as.numeric(iris$Species)
plot(iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
col=species)
species
data("iris")
#Transformação de Dados
species <- as.numeric(iris$Species)
plot(iris[,c("Sepal.Length")],
col=species)
data("iris")
#Transformação de Dados
species <- as.numeric(iris$Species)
plot(iris[,c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")],
col=species)
data("iris")
#Transformação de Dados - Espécie
species <- as.numeric(iris$Species)
#Diagrama de Dispersão
plot(iris[,c("Sepal.Length",
"Sepal.Width",
"Petal.Length",
"Petal.Width")],
col=species)
gerentes = read.table("ds.gerentes",header=T)
attach(gerentes)
setwd("~/Desktop/teste")
gerentes = read.table("ds.gerentes.txt",header=T)
attach(gerentes)
gerentes = read.table("ds.gerentes.txt",header=T)
attach(gerentes)
ajuste=lm(Salario ~ Experiencia)
ajuste
gerentes = read.table("ds.gerentes.txt",header=T)
attach(gerentes)
ajuste=lm(salario ~ experiencia)
ajuste
summary(ajuste)
shapiro.test(salario)
shapiro.test(experiencia)
shapiro.test(residuals(ajuste))
gerentes = read.table("ds.gerentes.txt",header=T)
attach(gerentes)
ajuste=glm(salario ~ experiencia)
ajuste
shapiro.test(residuals(ajuste))
gerentes = read.table("ds.gerentes.txt",header=T)
attach(gerentes)
ajuste=lm(salario ~ experiencia)
ajuste
summary(ajuste)
shapiro.test(residuals(ajuste))
gerentes = read.table("ds.gerentes.txt",header=T)
attach(gerentes)
ajuste=lm(tempo ~ desempenho)
ajuste
summary(ajuste)
shapiro.test(residuals(ajuste))
gerentes = read.table("ds.gerentes.txt",header=T)
attach(gerentes)
ajuste=lm(tempo ~ desempenho)
ajuste
summary(ajuste)
shapiro.test(residuals(ajuste))
gerentes = read.table("ds.gerentes.txt",header=T)
attach(gerentes)
ajuste=lm(tempo ~ desempenho)
ajuste
summary(ajuste)
shapiro.test(residuals(ajuste))
gerentes = read.table("ds.gerentes.txt",header=T)
ajuste
summary(ajuste)
cor.test(desempenho, tempo)
library(igraph)
#
# Limpa workspace e variaveis
#
ls()
rm(list=ls())
graphics.off()
#
# 1 - Leitura da Rede
#
str = 'powergrid'
net <- read.table(paste(str,'.txt', sep = ''))
if(dim(net)[2] > 2){
net[,3] = NULL
}
net = as.matrix(net)
if(min(net) == 0){
net = net + 1
}
G <- graph.data.frame(net, directed=FALSE)
G = graph_from_edgelist(net, directed = FALSE)
giant.component <- function(graph) {
cl <- clusters(graph)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
G <- giant.component(G)
clu <- components(G)
G = as.undirected(G)
G = simplify(G)
plot(bt, c,
col="royalblue1",
main="Rede - Power Grid - Análise de Correlação",
xlab="Betweenness Centrality",
ylab="Closeness Centrality",
pch=19)
mtext("Betweenness Centrality x Closeness Centrality")
abline(lm(c~bt), col="red")
lines(lowess(bt,c), col="green", type="b")
legend("bottomright", legend=c("Regression Line", "Lowess Line"),
col=c("red", "green"), lty=1:2, cex=0.8)
bt = betweenness(G)
c = closeness(G)
eg = eigen_centrality(G)$vector
pr = page_rank(G, damping = 0.85)$vector
plot(bt, c,
col="royalblue1",
main="Rede - Power Grid - Análise de Correlação",
xlab="Betweenness Centrality",
ylab="Closeness Centrality",
pch=19)
mtext("Betweenness Centrality x Closeness Centrality")
abline(lm(c~bt), col="red")
lines(lowess(bt,c), col="green", type="b")
legend("bottomright", legend=c("Regression Line", "Lowess Line"),
col=c("red", "green"), lty=1:2, cex=0.8)
bt = betweenness(G)
setwd("~/Documents/projetos/mecai-usp/Sistemas Complex I/Trabalho I")
library(igraph)
#
# Limpa workspace e variaveis
#
ls()
rm(list=ls())
graphics.off()
#
# 1 - Leitura da Rede
#
str = 'powergrid'
net <- read.table(paste(str,'.txt', sep = ''))
if(dim(net)[2] > 2){
net[,3] = NULL
}
net = as.matrix(net)
if(min(net) == 0){
net = net + 1
}
G <- graph.data.frame(net, directed=FALSE)
G = graph_from_edgelist(net, directed = FALSE)
giant.component <- function(graph) {
cl <- clusters(graph)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
G <- giant.component(G)
clu <- components(G)
G = as.undirected(G)
G = simplify(G)
bt = betweenness(G)
c = closeness(G)
eg = eigen_centrality(G)$vector
### PageRank
pr = page_rank(G, damping = 0.85)$vector
plot(bt, c,
col="royalblue1",
main="Rede - Power Grid - Análise de Correlação",
xlab="Betweenness Centrality",
ylab="Closeness Centrality",
pch=19)
mtext("Betweenness Centrality x Closeness Centrality")
abline(lm(c~bt), col="red")
lines(lowess(bt,c), col="green", type="b")
legend("bottomright", legend=c("Regression Line", "Lowess Line"),
col=c("red", "green"), lty=1:2, cex=0.8)
library(igraph)
#
# Limpa workspace e variaveis
#
ls()
rm(list=ls())
graphics.off()
#
# 1 - Leitura da Rede
#
str = 'hamster'
net <- read.table(paste(str,'.txt', sep = ''))
if(dim(net)[2] > 2){
net[,3] = NULL
}
net = as.matrix(net)
if(min(net) == 0){
net = net + 1
}
G <- graph.data.frame(net, directed=FALSE)
G = graph_from_edgelist(net, directed = FALSE)
giant.component <- function(graph) {
cl <- clusters(graph)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
G <- giant.component(G)
clu <- components(G)
G = as.undirected(G)
G = simplify(G)
bt = betweenness(G)
c = closeness(G)
eg = eigen_centrality(G)$vector
pr = page_rank(G, damping = 0.85)$vector
plot(pr, bt,
col="royalblue1",
main="Rede - Hamster - Análise de Correlação",
xlab="PageRank",
ylab="Betweenness Centrality",
pch=19)
mtext("PageRank x Betweenness Centrality")
abline(lm(bt~pr), col="red")
lines(lowess(pr,bt), col="green", type="b")
legend("bottomright", legend=c("Regression Line", "Lowess Line"),
col=c("red", "green"), lty=1:2, cex=0.8)
plot(pr, bt,
col="royalblue1",
main="Rede - Hamsterster - Análise de Correlação",
xlab="PageRank",
ylab="Betweenness Centrality",
pch=19)
mtext("PageRank x Betweenness Centrality")
abline(lm(bt~pr), col="red")
lines(lowess(pr,bt), col="green", type="b")
legend("bottomright", legend=c("Regression Line", "Lowess Line"),
col=c("red", "green"), lty=1:2, cex=0.8)
plot(eg, pr,
col="royalblue1",
main="Rede - Hamsterster - Análise de Correlação",
xlab="Eigenvector Centrality",
ylab="PageRank",
pch=19)
mtext("Eigenvector Centrality x PageRank")
abline(lm(pr~eg), col="red")
lines(lowess(eg,pr), col="green", type="b")
legend("bottomright", legend=c("Regression Line", "Lowess Line"),
col=c("red", "green"), lty=1:2, cex=0.8)
# {Closeness Centrality x Eigenvector Centrality}
# indica correlação de 0.702
plot(c, eg,
col="royalblue1",
main="Rede - Hamsterster - Análise de Correlação",
xlab="Closeness Centrality",
ylab="Eigenvector Centrality",
pch=19)
mtext("Closeness Centrality x Eigenvector Centrality")
abline(lm(eg~c), col="red")
lines(lowess(c,eg), col="green", type="b")
legend("bottomright", legend=c("Regression Line", "Lowess Line"),
col=c("red", "green"), lty=1:2, cex=0.8)
# {Eigenvector Centrality x Betweenness Centrality}
# indica correlação de 0.633
plot(eg, bt,
col="royalblue1",
main="Rede - Hamsterster - Análise de Correlação",
xlab="Eigenvector Centrality",
ylab="Betweenness Centrality",
pch=19)
mtext("Eigenvector Centrality x Betweenness Centrality")
abline(lm(bt~eg), col="red")
lines(lowess(eg,bt), col="green", type="b")
legend("bottomright", legend=c("Regression Line", "Lowess Line"),
col=c("red", "green"), lty=1:2, cex=0.8)
# {Eigenvector Centrality x Betweenness Centrality}
# indica correlação de 0.633
plot(eg, bt,
col="royalblue1",
main="Rede - Hamsterster - Análise de Correlação",
xlab="Eigenvector Centrality",
ylab="Betweenness Centrality",
pch=19)
mtext("Eigenvector Centrality x Betweenness Centrality")
abline(lm(bt~eg), col="red")
lines(lowess(eg,bt), col="green", type="b")
legend("bottomright", legend=c("Regression Line", "Lowess Line"),
col=c("red", "green"), lty=1:2, cex=0.8)
