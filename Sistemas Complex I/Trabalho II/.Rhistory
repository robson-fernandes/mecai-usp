#
# 8 - Calcula Assortatividade (Grau M?dio)
#
assortativity_degree(crthgraf, directed = FALSE)
#
# 9 - Calcula o knn do grafo
#
crthknn <- knn(crthgraf, vids = V(crthgraf), weights=NULL)
#
# 10 - Calcula a distribui??o do Grau
#
crthdegdist <- degree_distribution(crthgraf,mode="all",
cumulative=FALSE)
#
# 11 - Calcula o Grau
#
crthgrau <- degree(crthgraf, mode = "all")
#
# 12 - Criando uma tabela para plotar no ggplot
#
crthtabela = cbind.data.frame(crthgrau, knn=crthknn$knn)
crthtabela2 = cbind.data.frame(grau=1:length(crthknn$knnk), knnk=crthknn$knnk)
subset(crthtabela2$knnk, !is.nan(crthtabela2$knnk))
crthplot <- ggplot(crthtabela, aes(x = crthgrau)) +
geom_point(aes(y = knn, colour="K(vértice) vs Knn(vértice)")) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("Cortical Humano - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5), legend.justification = "top")
crthplot + geom_line(data=crthtabela2,
aes(x=grau,
y=knnk, colour="Knn(k)"))+
scale_colour_manual("",
breaks = c("Knn(k)", "K(vértice) vs Knn(vértice)"),
values = c("blue", "red"))
library(igraph)
library(ggplot2)
library(scales)
#
# Limpa workspace e variaveis
#
ls()
rm(list=ls())
graphics.off()
#setwd("~/Documents/projetos/mecai-usp/Sistemas Complex I/Trabalho II")
#
# 1 - Leitura da Rede
#
str = 'bases/cortical-gato'
crtgnet <- read.table(paste(str,'.txt', sep = ''))
#
# 2 - Caso tenha mais de 2 colunas a terceira ser? removida
#
if(dim(crtgnet)[2] > 2){
crtgnet[,3] = NULL
}
crtgnet = as.matrix(crtgnet)
if(min(crtgnet) == 0){
crtgnet = crtgnet + 1
}
#
# 3 - Gera??o do Gr?fico
#
crtggraf <- graph.data.frame(crtgnet, directed=FALSE)
crtggraf = graph_from_edgelist(crtgnet, directed = FALSE)
#
# 4 - Plotagem d
#
# 5 - Extra??o do maior componente da rede
#
giant.component <- function(graph) {
cl <- clusters(graph)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
crtggraf <- giant.component(crtggraf)
clu <- components(crtggraf)
crtggraf = as.undirected(crtggraf)
crtggraf = simplify(crtggraf)
#
# 7 - Calcula Assortatividade
#
assortativity(crtggraf, types1 = V(crtggraf), directed = FALSE)
#
# 8 - Calcula Assortatividade (Grau M?dio)
#
assortativity_degree(crtggraf, directed = FALSE)
#
# 9 - Calcula o knn do grafo
#
crtgknn <- knn(crtggraf, vids = V(crtggraf), weights=NULL)
#
# 10 - Calcula a distribui??o do Grau
#
crtgdegdist <- degree_distribution(crtggraf,mode="all",
cumulative=FALSE)
#
# 11 - Calcula o Grau
#
crtggrau <- degree(crtggraf, mode = "all")
#
# 12 - Criando uma tabela para plotar no ggplot
#
crtgtabela = cbind.data.frame(crtggrau, knn=crtgknn$knn)
crtgtabela2 = cbind.data.frame(grau=1:length(crtgknn$knnk), knnk=crtgknn$knnk)
subset(crtgtabela2$knnk, !is.nan(crtgtabela2$knnk))
crtgplot <- ggplot(crtgtabela, aes(x = crtggrau)) +
geom_point(aes(y = knn, colour="K(vértice) vs Knn(vértice)")) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("Cortical Gato - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5), legend.justification = "top")
crtgplot + geom_line(data=crtgtabela2,
aes(x=grau,
y=knnk, colour="Knn(k)"))+
scale_colour_manual("",
breaks = c("Knn(k)", "K(vértice) vs Knn(vértice)"),
values = c("blue", "red"))
library(igraph)
library(ggplot2)
library(scales)
#
# Limpa workspace e variaveis
#
ls()
rm(list=ls())
graphics.off()
#setwd("~/Documents/projetos/mecai-usp/Sistemas Complex I/Trabalho II")
#
# 1 - Leitura da Rede
#
str = 'bases/USairports'
usanet <- read.table(paste(str,'.txt', sep = ''))
#
# 2 - Caso tenha mais de 2 colunas a terceira ser? removida
#
if(dim(usanet)[2] > 2){
usanet[,3] = NULL
}
usanet = as.matrix(usanet)
if(min(usanet) == 0){
usanet = usanet + 1
}
#
# 3 - Gera??o do Gr?fico
#
usagraf <- graph.data.frame(usanet, directed=FALSE)
usagraf = graph_from_edgelist(usanet, directed = FALSE)
#
# 4 - Plotagem da Rede
#
# 5 - Extra??o do maior componente da rede
#
giant.component <- function(graph) {
cl <- clusters(graph)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
usagraf <- giant.component(usagraf)
clu <- components(usagraf)
usagraf = as.undirected(usagraf)
usagraf = simplify(usagraf)
#
# 7 - Calcula Assortatividade
#
assortativity(usagraf, types1 = V(usagraf), directed = FALSE)
#
# 8 - Calcula Assortatividade (Grau M?dio)
#
assortativity_degree(usagraf, directed = FALSE)
#
# 9 - Calcula o knn do grafo
#
usaknn <- knn(usagraf, vids = V(usagraf), weights=NULL)
#
# 10 - Calcula a distribui??o do Grau
#
usadegdist <- degree_distribution(usagraf,mode="all",
cumulative=FALSE)
#
# 11 - Calcula o Grau
#
usagrau <- degree(usagraf, mode = "all")
#
# 12 - Criando uma tabela para plotar no ggplot
#
ustabela = cbind.data.frame(usgrau, knn=usknn$knn)
ustabela2 = cbind.data.frame(grau=1:length(usaknn$knnk), knnk=usknn$knnk)
subset(ustabela2$knnk, !is.nan(ustabela2$knnk))
usaplot <- ggplot(ustabela, aes(x = usagrau)) +
geom_point(aes(y = knn, colour="K(vértice) vs Knn(vértice)")) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("US Airport - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5), legend.justification = "top")
usaplot + geom_line(data=usatabela2,
aes(x=grau,
y=knnk, colour="Knn(k)"))+
scale_colour_manual("",
breaks = c("Knn(k)", "K(vértice) vs Knn(vértice)"),
values = c("blue", "red"))
#
# 7 - Calcula Assortatividade
#
assortativity(usagraf, types1 = V(usagraf), directed = FALSE)
#
# 8 - Calcula Assortatividade (Grau M?dio)
#
assortativity_degree(usagraf, directed = FALSE)
#
# 9 - Calcula o knn do grafo
#
usaknn <- knn(usagraf, vids = V(usagraf), weights=NULL)
#
# 10 - Calcula a distribui??o do Grau
#
usadegdist <- degree_distribution(usagraf,mode="all",
cumulative=FALSE)
#
# 11 - Calcula o Grau
#
usagrau <- degree(usagraf, mode = "all")
# 12 - Criando uma tabela para plotar no ggplot
#
ustabela = cbind.data.frame(usgrau, knn=usknn$knn)
ustabela2 = cbind.data.frame(grau=1:length(usaknn$knnk), knnk=usknn$knnk)
subset(ustabela2$knnk, !is.nan(ustabela2$knnk))
#
# 12 - Criando uma tabela para plotar no ggplot
#
ustabela = cbind.data.frame(usgrau, knn=usknn$knn)
ustabela2 = cbind.data.frame(grau=1:length(usaknn$knnk), knnk=usknn$knnk)
subset(ustabela2$knnk, !is.nan(ustabela2$knnk))
ustabela = cbind.data.frame(usgrau, knn=usknn$knn)
ustabela2 = cbind.data.frame(grau=1:length(usaknn$knnk), knnk=usknn$knnk)
usatabela = cbind.data.frame(usagrau, knn=usaknn$knn)
usatabela2 = cbind.data.frame(grau=1:length(usaknn$knnk), knnk=usknn$knnk)
subset(usatabela2$knnk, !is.nan(usatabela2$knnk))
usatabela = cbind.data.frame(usagrau, knn=usaknn$knn)
usatabela2 = cbind.data.frame(grau=1:length(usaknn$knnk), knnk=usaknn$knnk)
subset(usatabela2$knnk, !is.nan(usatabela2$knnk))
usaplot <- ggplot(usatabela, aes(x = usagrau)) +
geom_point(aes(y = knn, colour="K(vértice) vs Knn(vértice)")) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("US Airport - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5), legend.justification = "top")
usaplot + geom_line(data=usatabela2,
aes(x=grau,
y=knnk, colour="Knn(k)"))+
scale_colour_manual("",
breaks = c("Knn(k)", "K(vértice) vs Knn(vértice)"),
values = c("blue", "red"))
usaplot <- ggplot(usatabela, aes(x = usagrau)) +
geom_point(aes(y = knn, colour="K(vértice) vs Knn(vértice)")) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("US Airport - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5), legend.justification = "top")
usaplot + geom_line(data=usatabela2,
aes(x=grau,
y=knnk, colour="Knn(k)"))+
scale_colour_manual("",
breaks = c("Knn(k)", "K(vértice) vs Knn(vértice)"),
values = c("blue", "red"))
library(igraph)
library(ggplot2)
library(scales)
#
# Limpa workspace e variaveis
#
ls()
rm(list=ls())
graphics.off()
#setwd("~/Documents/projetos/mecai-usp/Sistemas Complex I/Trabalho II")
#
# 1 - Leitura da Rede
#
str = 'bases/euroroad'
euronet <- read.table(paste(str,'.txt', sep = ''))
#
# 2 - Caso tenha mais de 2 colunas a terceira ser? removida
#
if(dim(euronet)[2] > 2){
euronet[,3] = NULL
}
euronet = as.matrix(euronet)
if(min(euronet) == 0){
euronet = euronet + 1
}
#
# 3 - Gera??o do Gr?fico
#
eurograf <- graph.data.frame(euronet, directed=FALSE)
eurograf = graph_from_edgelist(euronet, directed = FALSE)
#
# 4 - Plotagem
#
# 5 - Extra??o do maior componente da rede
#
giant.component <- function(graph) {
cl <- clusters(graph)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
eurograf <- giant.component(eurograf)
clu <- components(eurograf)
eurograf = as.undirected(eurograf)
eurograf = simplify(eurograf)
#
# 7 - Calcula Assortatividade
#
assortativity(eurograf, types1 = V(eurograf), directed = FALSE)
#
# 8 - Calcula Assortatividade (Grau M?dio)
#
assortativity_degree(eurograf, directed = FALSE)
#
# 9 - Calcula o knn do grafo
#
euroknn <- knn(eurograf, vids = V(eurograf), weights=NULL)
#
# 10 - Calcula a distribui??o do Grau
#
eurodegdist <- degree_distribution(eurograf,mode="all",
cumulative=FALSE)
#
# 11 - Calcula o Grau
#
eurograu <- degree(eurograf, mode = "all")
#
# 12 - Criando uma tabela para plotar no ggplot
#
eurotabela = cbind.data.frame(eurograu, knn=euroknn$knn)
eurotabela2 = cbind.data.frame(grau=1:length(euroknn$knnk), knnk=euroknn$knnk)
subset(eurotabela2$knnk, !is.nan(eurotabela2$knnk))
europlot <- ggplot(eurotabela, aes(x = eurograu)) +
geom_point(aes(y = knn, colour="K(vértice) vs Knn(vértice)")) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("Euro Road - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5), legend.justification = "top")
europlot + geom_line(data=eurotabela2,
aes(x=grau,
y=knnk, colour="Knn(k)"))+
scale_colour_manual("",
breaks = c("Knn(k)", "K(vértice) vs Knn(vértice)"),
values = c("red", "blue"))
europlot <- ggplot(eurotabela, aes(x = eurograu)) +
geom_point(aes(y = knn, colour="K(vértice) vs Knn(vértice)")) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("Euro Road - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5), legend.justification = "top")
europlot + geom_line(data=eurotabela2,
aes(x=grau,
y=knnk, colour="Knn(k)"))+
scale_colour_manual("",
breaks = c("Knn(k)", "K(vértice) vs Knn(vértice)"),
values = c("red", "blue"))
europlot <- ggplot(eurotabela, aes(x = eurograu)) +
geom_point(aes(y = knn, colour="K(vértice) vs Knn(vértice)")) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("Euro Road - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5), legend.justification = "top")
europlot + geom_line(data=eurotabela2,
aes(x=grau,
y=knnk, colour="Knn(k)"))+
scale_colour_manual("",
breaks = c("Knn(k)", "K(vértice) vs Knn(vértice)"),
values = c("blue", "red"))
library(igraph)
library(ggplot2)
library(scales)
#
# Limpa workspace e variaveis
#
ls()
rm(list=ls())
graphics.off()
#setwd("C:/Users/guima/OneDrive/Mestrado/Sistemas Complexos/Projeto2")
#
# 1 - Leitura da Rede
#
str = 'bases/hamster'
hamnet <- read.table(paste(str,'.txt', sep = ''))
#
# 2 - Caso tenha mais de 2 colunas a terceira ser? removida
#
if(dim(hamnet)[2] > 2){
hamnet[,3] = NULL
}
hamnet = as.matrix(hamnet)
if(min(hamnet) == 0){
hamnet = hamnet + 1
}
#
# 3 - Gera??o do Gr?fico
#
hamgraf <- graph.data.frame(hamnet, directed=FALSE)
hamgraf = graph_from_edgelist(hamnet, directed = FALSE)
#
#
# 5 - Extra??o do maior componente da rede
#
giant.component <- function(graph) {
cl <- clusters(graph)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
hamgraf <- giant.component(hamgraf)
clu <- components(hamgraf)
hamgraf = as.undirected(hamgraf)
hamgraf = simplify(hamgraf)
#
# 7 - Calcula Assortatividade
#
assortativity(hamgraf, types1 = V(hamgraf), directed = FALSE)
#
# 8 - Calcula Assortatividade (Grau M?dio)
#
assortativity_degree(hamgraf, directed = FALSE)
#
# 9 - Calcula o knn do grafo
#
hamknn <- knn(hamgraf, vids = V(hamgraf), weights=NULL)
#
# 10 - Calcula a distribui??o do Grau
#
hamdegdist <- degree_distribution(hamgraf,mode="all",
cumulative=FALSE)
#
# 11 - Calcula o Grau
#
hamgrau <- degree(hamgraf, mode = "all")
#
# 12 - Criando uma tabela para plotar no ggplot
#
hamtabela = cbind.data.frame(hamgrau, knn=hamknn$knn)
hamtabela2 = cbind.data.frame(grau=1:length(hamknn$knnk), knnk=hamknn$knnk)
subset(hamtabela2$knnk, !is.nan(hamtabela2$knnk))
hamplot <- ggplot(hamtabela, aes(x = hamgrau)) +
geom_point(aes(y = knn, colour="K(vértice) vs Knn(vértice)")) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("Hamsterster - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5), legend.justification = "top")
hamplot + geom_line(data=hamtabela2,
aes(x=grau,
y=knnk, colour="Knn(k)"))+
scale_colour_manual("",
breaks = c("Knn(k)", "K(vértice) vs Knn(vértice)"),
values = c("blue", "red"))
hamplot <- ggplot(hamtabela, aes(x = hamgrau)) +
geom_point(aes(y = knn, colour="K(vértice) vs Knn(vértice)")) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("Hamsterster - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5), legend.justification = "top")
hamplot + geom_line(data=hamtabela2,
aes(x=grau,
y=knnk, colour="Knn(k)"))+
scale_colour_manual("",
breaks = c("Knn(k)", "K(vértice) vs Knn(vértice)"),
values = c("blue", "red"))
