install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("backports", "bit64", "BMA", "brms", "CARBayes", "cba", "circlize", "Ckmeans.1d.dp", "cubature", "devtools", "Epi", "EpiModel", "fields", "gamlss", "heatmaply", "hunspell", "jsonlite", "knitr", "lsmeans", "MCMCpack", "plotly", "plotrix", "purrr", "quantmod", "R6", "RANN", "Rcpp", "RcppArmadillo", "readr", "rticles", "seriation", "snowFT", "spatstat", "testit", "tibble", "tidyr", "timereg", "tseries", "webshot", "Zelig"))
install.packages(c("dplyr", "fastICA", "fields", "gamlss.dist", "gdata", "GGally", "janeaustenr", "mapproj", "maps", "MBESS", "mix", "pdftools", "pROC", "sfsmisc", "survey", "Zelig"))
ver
r
version
version
install.packages("kernlab")
install.packages("igraph")
install.packages("kernlab")
version
library(igraph)
library(igraph)
ls()
rm(list=ls())
graphics.off()
network <- graph.empty (10, directed = FALSE)
ecount(network)
colection.edges <- c(1,2,
2,3,
2,4,
4,3,
3,5,
5,6,
5,7,
6,7,
7,8,
7,9,
7,10)
network <- add.edges(network, colection.edges)
plot(network)
matrixA <- get.adjacency(network)
sum(matrixA)
kMedio <- mean(degree(network))
grau <- degree(network, mode = "all")
plot(network, vertex.size=grau*5)
h <- hist(grau, breaks = 1:vcount(network) - 1, main = "Histograma dos Graus")
graph.density(network)
edge_density(network, loops = FALSE)
deg.dist <- degree_distribution(network,mode="all",
cumulative=FALSE)
plot(x=0:5,y=deg.dist, pch=19, cex=1.2,
xlab="Grau",
ylab="Frequencia",
type="p",
col="blue",
main = "DistribuiÃ§Ã£o do Grau MÃ©dio")
grau <- grau^2
sum.grau.square = sum(grau)
total.grau <- length(grau)
kQuadrado <- sum.grau.square / total.grau
kQuadrado
#Calcula da Variancia
variancia <- kQuadrado - kMedio^2
variancia
library(igraph)
library(tnet)
ls()
rm(list=ls())
graphics.off()
network <- graph.empty (34761, directed = TRUE)
ecount(network)
myFile <- file.choose()
tabela <- read.csv(myFile, header = FALSE, sep = "")
matrixA <- get.adjacency(network)
matrixA
sum(matrixA)
kMedio <- mean(degree(network))
kMedio
grau <- degree(network, mode = "all")
grau
graph.density(network)
edge_density(network, loops = FALSE)
deg.dist <- degree_distribution(network,mode="all",
cumulative=FALSE)
plot(x=0:kMaximo,y=deg.dist, pch=19, cex=1.2,
xlab="Grau",
ylab="Frequencia",
type="p",
col="blue",
main = "Distribuição do Grau")
kMaximo <- max(degree(network))
kMaximo
library(igraph)
library(tnet)
ls()
rm(list=ls())
graphics.off()
network <- graph.empty (34761, directed = TRUE)
ecount(network)
myFile <- file.choose()
tabela <- read.csv(myFile, header = FALSE, sep = "")
tabela
network <- graph_from_data_frame(tabela, directed = TRUE, vertices =NULL)
network
network
degree (network)
kMedio <- mean(degree(network))
kMedio
kMaximo <- max(degree(network))
kMaximo
grau <- degree(network, mode = "all")
grau
h <- hist(grau, breaks = 1:kMaximo, main = "Histograma dos Graus")
graph.density(network)
vcount(network)
edge_density(network, loops = TRUE)
graph.density(network)
edge_density(network, loops = FALSE)
edge_density(network, loops = TRUE)
deg.dist <- degree_distribution(network,mode="all",
cumulative=FALSE)
plot(x=0:kMaximo,y=deg.dist, pch=19, cex=1.2,
xlab="Grau",
ylab="Frequencia",
type="p",
col="blue",
main = "Distribuição do Grau")
plot(x=0:kMaximo,y=deg.dist, pch=19, cex=1.2,
xlab="Grau",
ylab="Frequencia",
type="p",
col="blue",
main = "Distribuição do Grau")
grau <- grau^2
sum.grau.square = sum(grau)
total.grau <- length(grau)
kQuadrado <- sum.grau.square / total.grau
kQuadrado
variancia <- kQuadrado - kMedio^2
variancia
library(igraph)
library(ggplot2)
library(scales)
#
# Limpa workspace e variaveis
#
ls()
#rm(list=ls())
graphics.off()
setwd("C:/Users/guima/OneDrive/Mestrado/Sistemas Complexos/Projeto2")
#
# 1 - Leitura da Rede
#
str = 'bases/USairports'
usanet <- read.table(paste(str,'.txt', sep = ''))
#
# 2 - Caso tenha mais de 2 colunas a terceira será removida
#
if(dim(usanet)[2] > 2){
usanet[,3] = NULL
}
usanet = as.matrix(usanet)
if(min(usanet) == 0){
usanet = usanet + 1
}
#
# 3 - Geração do Gráfico
#
usagraf <- graph.data.frame(usanet, directed=FALSE)
usagraf = graph_from_edgelist(usanet, directed = FALSE)
giant.component <- function(graph) {
cl <- clusters(graph)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
usagraf <- giant.component(usagraf)
clu <- components(usagraf)
usagraf = as.undirected(usagraf)
usagraf = simplify(usagraf)
assortativity(usagraf, types1 = V(usagraf), directed = FALSE)
#
# 8 - Calcula Assortatividade (Grau Médio)
#
assortativity_degree(usagraf, directed = FALSE)
#
# 9 - Calcula o knn do grafo
#
usaknn <- knn(usagraf, vids = V(usagraf), weights=NULL)
#
# 10 - Calcula a distribuição do Grau
#
usadegdist <- degree_distribution(usagraf,mode="all",
cumulative=FALSE)
#
# 11 - Calcula o Grau
#
usagrau <- degree(usagraf, mode = "all")
usagrau
length(usagrau)
ustabela = cbind.data.frame(usagrau, usaknn$knn)
usaplot <- ggplot(ustabela, aes(x = usagrau, y = usaknn$knn)) +
geom_point(colour="blue") +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("US Airport - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5))
usaplot
usaplot
plot(x=usagrau, y=usaknn$knn)
plot(usaknn$knnk)
usadegdist
length(usadegdist)
length(usaknn$knnk)
usadegdist
usadegdist[1:315]
length(usadegdist[1:315])
length(usadegdist[2:315])
usadegdist[2:315]
plot(x=usadegdist[2:315], y=usaknn$knnk )
plot(usaknn)
plot(usaknn$knnk)
usaknn$knnk
plot(usaknn$knnk)
plot(usaknn$knnk, xlab = "Média do Grau", ylab="Grau da Rede")
plot(usaknn$knnk, ylab = "Média do Grau", xlab="Grau da Rede")
library(igraph)
library(ggplot2)
library(scales)
#
# Limpa workspace e variaveis
#
ls()
#rm(list=ls())
graphics.off()
setwd("C:/Users/guima/OneDrive/Mestrado/Sistemas Complexos/Projeto2")
#
# 1 - Leitura da Rede
#
str = 'bases/euroroad'
euronet <- read.table(paste(str,'.txt', sep = ''))
#
# 2 - Caso tenha mais de 2 colunas a terceira será removida
#
if(dim(euronet)[2] > 2){
euronet[,3] = NULL
}
euronet = as.matrix(euronet)
if(min(euronet) == 0){
euronet = euronet + 1
}
#
# 3 - Geração do Gráfico
#
eurograf <- graph.data.frame(euronet, directed=FALSE)
eurograf = graph_from_edgelist(euronet, directed = FALSE)
giant.component <- function(graph) {
cl <- clusters(graph)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
eurograf <- giant.component(eurograf)
clu <- components(eurograf)
eurograf = as.undirected(eurograf)
eurograf = simplify(eurograf)
#
assortativity(eurograf, types1 = V(eurograf), directed = FALSE)
#
# 8 - Calcula Assortatividade (Grau Médio)
#
assortativity_degree(eurograf, directed = FALSE)
#
# 9 - Calcula o knn do grafo
#
euroknn <- knn(eurograf, vids = V(eurograf), weights=NULL)
#
# 10 - Calcula a distribuição do Grau
#
eurodegdist <- degree_distribution(eurograf,mode="all",
cumulative=FALSE)
#
# 11 - Calcula o Grau
#
eurograu <- degree(eurograf, mode = "all")
#
# 12 - Criando uma tabela para plotar no ggplot
#
eurotabela = cbind.data.frame(eurograu, euroknn$knn)
#
# 13 - Plotando com ggplot
#
europlot <- ggplot(eurotabela, aes(x = eurograu, y = euroknn$knn)) +
geom_point(colour="blue") +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("Euro Road - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5))
europlot
plot(euroknn$knnk)
plot(euroknn$knnk)
plot(euroknn$knn)
plot(euroknn$knnk,
pch=19,
cex=1.2,
log = "xy",
xlab = "Grau (log)",
ylab = "Média do Grau - Knnk",
col = "blue",
type = 'p',
main = "Gráfico Média do Grau x Grau da Rede")
plot(euroknn$knnk,
pch=19,
cex=1.2,
log = "xy",
xlab = "Grau da Rede",
ylab = "Média do Grau - Knnk",
col = "blue",
type = 'p',
main = "Gráfico Média do Grau x Grau da Rede")
library(igraph)
library(ggplot2)
library(scales)
#
# Limpa workspace e variaveis
#
ls()
rm(list=ls())
graphics.off()
setwd("C:/Users/guima/OneDrive/Mestrado/Sistemas Complexos/Projeto2")
#
# 1 - Leitura da Rede
#
str = 'bases/hamster'
hamnet <- read.table(paste(str,'.txt', sep = ''))
#
# 2 - Caso tenha mais de 2 colunas a terceira será removida
#
if(dim(hamnet)[2] > 2){
hamnet[,3] = NULL
}
hamnet = as.matrix(hamnet)
if(min(hamnet) == 0){
hamnet = hamnet + 1
}
hamgraf <- graph.data.frame(hamnet, directed=FALSE)
hamgraf = graph_from_edgelist(hamnet, directed = FALSE)
giant.component <- function(graph) {
cl <- clusters(graph)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
hamgraf <- giant.component(hamgraf)
clu <- components(hamgraf)
hamgraf = as.undirected(hamgraf)
hamgraf = simplify(hamgraf)
assortativity(hamgraf, types1 = V(hamgraf), directed = FALSE)
#
# 8 - Calcula Assortatividade (Grau Médio)
#
assortativity_degree(hamgraf, directed = FALSE)
#
# 9 - Calcula o knn do grafo
#
hamknn <- knn(hamgraf, vids = V(hamgraf), weights=NULL)
#
# 10 - Calcula a distribuição do Grau
#
hamdegdist <- degree_distribution(hamgraf,mode="all",
cumulative=FALSE)
hamgrau <- degree(hamgraf, mode = "all")
hamtabela = cbind.data.frame(hamgrau, hamknn$knn)
hamplot <- ggplot(hamtabela, aes(x = hamgrau, y = hamknn$knn)) +
geom_point(colour="blue") +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("Hamsterster - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5))
hamplot
plot(hamknn$knnk,
pch=19,
cex=1.2,
log = "xy",
xlab = "Grau da Rede",
ylab = "Média do Grau - Knnk",
col = "blue",
type = 'p',
main = "Média do Grau x Grau da Rede")
length(hamgrau)
length(eurograf)
length(hamgraf)
hamgraf
library(igraph)
library(ggplot2)
library(scales)
#
# Limpa workspace e variaveis
#
ls()
#rm(list=ls())
graphics.off()
setwd("C:/Users/guima/OneDrive/Mestrado/Sistemas Complexos/Projeto2")
#
# 1 - Leitura da Rede
#
str = 'bases/USairports'
usanet <- read.table(paste(str,'.txt', sep = ''))
#
# 2 - Caso tenha mais de 2 colunas a terceira será removida
#
if(dim(usanet)[2] > 2){
usanet[,3] = NULL
}
usanet = as.matrix(usanet)
if(min(usanet) == 0){
usanet = usanet + 1
}
#
# 3 - Geração do Gráfico
#
usagraf <- graph.data.frame(usanet, directed=FALSE)
usagraf = graph_from_edgelist(usanet, directed = FALSE)
giant.component <- function(graph) {
cl <- clusters(graph)
induced.subgraph(graph, which(cl$membership == which.max(cl$csize)))
}
usagraf <- giant.component(usagraf)
clu <- components(usagraf)
usagraf = as.undirected(usagraf)
usagraf = simplify(usagraf)
assortativity(usagraf, types1 = V(usagraf), directed = FALSE)
#
# 8 - Calcula Assortatividade (Grau Médio)
#
assortativity_degree(usagraf, directed = FALSE)
#
# 9 - Calcula o knn do grafo
#
usaknn <- knn(usagraf, vids = V(usagraf), weights=NULL)
#
# 10 - Calcula a distribuição do Grau
#
usadegdist <- degree_distribution(usagraf,mode="all",
cumulative=FALSE)
#
# 11 - Calcula o Grau
#
usagrau <- degree(usagraf, mode = "all")
ustabela = cbind.data.frame(usagrau, usaknn$knn)
#
# 13 - Plotando com ggplot
#
usaplot <- ggplot(ustabela, aes(x = usagrau, y = usaknn$knn)) +
geom_point(colour="blue") +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw()+
labs(x="Grau") +
labs(y="Média dos graus do vértice K") +
ggtitle("US Airport - Grau(k) x Knn(k)") +
theme(plot.title = element_text(hjust = 0.5))
usaplot
length(usagraf)
length(usagraf)
usagraf
usaknn
max(usagrau)
plot(usaknn$knnk)
usafastgree <- cluster_fast_greedy(usagraf,
merges = TRUE,
modularity = TRUE,
membership = TRUE,
weights = E(usagraf)$weight)
usafastgree$modularity
usafastgree$membership
usafastgree$algorithm
usafastgree$vcount
usafastgree$merges
g <- erdos.renyi.game(100, 1/100)
graphs <- decompose.graph(g)
V(g)$label <- seq(vcount(g))
graphs <- decompose.graph(g)
graphs
largest <- which.max(sapply(graphs, vcount))
plot(graphs[[largest]], layout=layout.fruchterman.reingold)
largest <- which.max(sapply(graphs, vcount))
plot(graphs[[largest]], layout=layout.fruchterman.reingold)
plot(g, layout=layout.fruchterman.reingold)
clear
plot_dendrogram(usafastgree$merges, mode="hclust", colbar=palette(),)
plot_dendrogram(usafastgree$merges, mode="hclust", colbar=palette(), edge.color=NULL, use.edge.length=FALSE, \dots)
plot_dendrogram(usafastgree, mode="hclust", colbar=palette(), edge.color=NULL, use.edge.length=FALSE, \dots)
plot_dendrogram(usafastgree)
