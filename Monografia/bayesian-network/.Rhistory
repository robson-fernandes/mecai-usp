model.lm = lm(quantidade ~ vlrUnitario + codGrupoVenda + codTipoVenda + mes )
summary(model.lm)
summary(model.lm)$r.squared * 100
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
modelo = lm(quantidade ~ vlrUnitario + codGrupoVenda + codTipoVenda + mes, family=binomial(link="logit"));
summary(modelo)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
modelo = lm(quantidade ~ vlrUnitario + codGrupoVenda + codTipoVenda + mes, family=binomial(link="logit"));
modelo
summary(modelo)
library(bnlearn)
library(forecast)
#source("http://bioconductor.org/biocLite.R")
#biocLite("Rgraphviz")
library(Rgraphviz)
#Limpar
dev.off(dev.list()["RStudioGD"])
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
test.set = movimentacao[1:69000, c("quantidade", "mes", "indiceSemana", "descricaoDiaSemana", "produto", "feriado", "codTipoVenda", "codGrupoVenda")]
## define variables as factors
test.set$diaSemana = as.factor(test.set$diaSemana)
test.set$mes = as.factor(test.set$mes)
test.set$indiceSemana = as.factor(test.set$indiceSemana)
test.set$codTipoVenda = as.factor(test.set$codTipoVenda)
test.set$codGrupoVenda = as.factor(test.set$codGrupoVenda)
#test.set$quantidade = as.factor(test.set$quantidade)
bn_df <- data.frame(test.set)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bn_df)
g <- graphviz.plot(res)
#defAttrs <- getDefaultAttrs()
#defAttrs
#z <- paste0("newlab_", letters[1:numNodes(g)])
#names(z) <- nodes(g)
#nAttrs <- list()
#nAttrs$label <- z
# updated plots
#plot(g, nodeAttrs=nAttrs)
#plot(g, attrs=list(node=list(fillcolor="blue"),edge=list(color="blue"),graph=list(rankdir="LR")))
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=5,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","mes", "semana", "dia", "produto", "feriado", "tipo venda", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
#Treinamento
#O algoritmo EM ? usado para encontrar a m?xima probabilidade de par?metros
# de modelos estat?sticos com base em dados n?o observados.
#Expectation-Maximization (EM) Algorithm
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Tabela de Probabilidade DiaSemana - Tipo de Venda
#print(fittedbn$descricaoDiaSemana)
#print(fittedbn$quantidadeIntervalo)
#Inferencia
# Qual ? a chance - > Evidencia
# de ocorrer o evento
#Qual ? chance de em Janeiro,
a <- cpquery(fittedbn,
event = (quantidade>10 & quantidade <15),
evidence = (mes=="1" & indiceSemana=="4" & descricaoDiaSemana=="Domingo"  &  codGrupoVenda=="4" & codTipoVenda=="1" ) )
percentual = a * 100
percentual
library(bnlearn)
library(forecast)
#source("http://bioconductor.org/biocLite.R")
#biocLite("Rgraphviz")
library(Rgraphviz)
#Limpar
dev.off(dev.list()["RStudioGD"])
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
test.set = movimentacao[1:69000, c("quantidade", "mes", "indiceSemana", "descricaoDiaSemana", "produto", "feriado", "codTipoVenda", "codGrupoVenda")]
## define variables as factors
test.set$diaSemana = as.factor(test.set$diaSemana)
test.set$mes = as.factor(test.set$mes)
test.set$indiceSemana = as.factor(test.set$indiceSemana)
test.set$codTipoVenda = as.factor(test.set$codTipoVenda)
test.set$codGrupoVenda = as.factor(test.set$codGrupoVenda)
#test.set$quantidade = as.factor(test.set$quantidade)
bn_df <- data.frame(test.set)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bn_df)
g <- graphviz.plot(res)
#defAttrs <- getDefaultAttrs()
#defAttrs
#z <- paste0("newlab_", letters[1:numNodes(g)])
#names(z) <- nodes(g)
#nAttrs <- list()
#nAttrs$label <- z
# updated plots
#plot(g, nodeAttrs=nAttrs)
#plot(g, attrs=list(node=list(fillcolor="blue"),edge=list(color="blue"),graph=list(rankdir="LR")))
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=5,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","mes", "semana", "dia", "produto", "feriado", "tipo venda", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
#Treinamento
#O algoritmo EM ? usado para encontrar a m?xima probabilidade de par?metros
# de modelos estat?sticos com base em dados n?o observados.
#Expectation-Maximization (EM) Algorithm
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Tabela de Probabilidade DiaSemana - Tipo de Venda
#print(fittedbn$descricaoDiaSemana)
#print(fittedbn$quantidadeIntervalo)
#Inferencia
# Qual ? a chance - > Evidencia
# de ocorrer o evento
#Qual ? chance de em Janeiro,
a <- cpquery(fittedbn,
event = (quantidade>0 & quantidade <15),
evidence = (mes=="1" & indiceSemana=="4" & descricaoDiaSemana=="Domingo"  &  codGrupoVenda=="4" & codTipoVenda=="1" ) )
percentual = a * 100
percentual
par(mfrow=c(1,2))
library(bnlearn)
library(forecast)
#source("http://bioconductor.org/biocLite.R")
#biocLite("Rgraphviz")
library(Rgraphviz)
#Limpar
dev.off(dev.list()["RStudioGD"])
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
test.set = movimentacao[1:69000, c("quantidade", "mes", "indiceSemana", "descricaoDiaSemana", "produto", "feriado", "codTipoVenda", "codGrupoVenda")]
## define variables as factors
test.set$diaSemana = as.factor(test.set$diaSemana)
test.set$mes = as.factor(test.set$mes)
test.set$indiceSemana = as.factor(test.set$indiceSemana)
test.set$codTipoVenda = as.factor(test.set$codTipoVenda)
test.set$codGrupoVenda = as.factor(test.set$codGrupoVenda)
#test.set$quantidade = as.factor(test.set$quantidade)
bn_df <- data.frame(test.set)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bn_df)
par(mfrow=c(1,2))
g <- graphviz.plot(res)
#defAttrs <- getDefaultAttrs()
#defAttrs
#z <- paste0("newlab_", letters[1:numNodes(g)])
#names(z) <- nodes(g)
#nAttrs <- list()
#nAttrs$label <- z
# updated plots
#plot(g, nodeAttrs=nAttrs)
#plot(g, attrs=list(node=list(fillcolor="blue"),edge=list(color="blue"),graph=list(rankdir="LR")))
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=5,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","mes", "semana", "dia", "produto", "feriado", "tipo venda", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
#Treinamento
#O algoritmo EM ? usado para encontrar a m?xima probabilidade de par?metros
# de modelos estat?sticos com base em dados n?o observados.
#Expectation-Maximization (EM) Algorithm
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Tabela de Probabilidade DiaSemana - Tipo de Venda
#print(fittedbn$descricaoDiaSemana)
#print(fittedbn$quantidadeIntervalo)
#Inferencia
# Qual ? a chance - > Evidencia
# de ocorrer o evento
#Qual ? chance de em Janeiro,
a <- cpquery(fittedbn,
event = (quantidade>0 & quantidade <15),
evidence = (mes=="1" & indiceSemana=="4" & descricaoDiaSemana=="Domingo"  &  codGrupoVenda=="4" & codTipoVenda=="1" ) )
percentual = a * 100
percentual
library(bnlearn)
library(forecast)
#source("http://bioconductor.org/biocLite.R")
#biocLite("Rgraphviz")
library(Rgraphviz)
#Limpar
dev.off(dev.list()["RStudioGD"])
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
test.set = movimentacao[1:69000, c("quantidade", "mes", "indiceSemana", "descricaoDiaSemana", "produto", "feriado", "codTipoVenda", "codGrupoVenda")]
## define variables as factors
test.set$diaSemana = as.factor(test.set$diaSemana)
test.set$mes = as.factor(test.set$mes)
test.set$indiceSemana = as.factor(test.set$indiceSemana)
test.set$codTipoVenda = as.factor(test.set$codTipoVenda)
test.set$codGrupoVenda = as.factor(test.set$codGrupoVenda)
#test.set$quantidade = as.factor(test.set$quantidade)
bn_df <- data.frame(test.set)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bn_df)
par(mfrow=c(1,1))
g <- graphviz.plot(res)
#defAttrs <- getDefaultAttrs()
#defAttrs
#z <- paste0("newlab_", letters[1:numNodes(g)])
#names(z) <- nodes(g)
#nAttrs <- list()
#nAttrs$label <- z
# updated plots
#plot(g, nodeAttrs=nAttrs)
#plot(g, attrs=list(node=list(fillcolor="blue"),edge=list(color="blue"),graph=list(rankdir="LR")))
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=5,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","mes", "semana", "dia", "produto", "feriado", "tipo venda", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
#Treinamento
#O algoritmo EM ? usado para encontrar a m?xima probabilidade de par?metros
# de modelos estat?sticos com base em dados n?o observados.
#Expectation-Maximization (EM) Algorithm
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Tabela de Probabilidade DiaSemana - Tipo de Venda
#print(fittedbn$descricaoDiaSemana)
#print(fittedbn$quantidadeIntervalo)
#Inferencia
# Qual ? a chance - > Evidencia
# de ocorrer o evento
#Qual ? chance de em Janeiro,
a <- cpquery(fittedbn,
event = (quantidade>0 & quantidade <15),
evidence = (mes=="1" & indiceSemana=="4" & descricaoDiaSemana=="Domingo"  &  codGrupoVenda=="4" & codTipoVenda=="1" ) )
percentual = a * 100
percentual
library(bnlearn)
library(forecast)
#source("http://bioconductor.org/biocLite.R")
#biocLite("Rgraphviz")
library(Rgraphviz)
#Limpar
dev.off(dev.list()["RStudioGD"])
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
test.set = movimentacao[1:69000, c("quantidade", "mes", "indiceSemana", "descricaoDiaSemana", "produto", "feriado", "codTipoVenda", "codGrupoVenda")]
## define variables as factors
test.set$diaSemana = as.factor(test.set$diaSemana)
test.set$mes = as.factor(test.set$mes)
test.set$indiceSemana = as.factor(test.set$indiceSemana)
test.set$codTipoVenda = as.factor(test.set$codTipoVenda)
test.set$codGrupoVenda = as.factor(test.set$codGrupoVenda)
#test.set$quantidade = as.factor(test.set$quantidade)
bn_df <- data.frame(test.set)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- gs(bn_df)
g <- graphviz.plot(res)
#defAttrs <- getDefaultAttrs()
#defAttrs
#z <- paste0("newlab_", letters[1:numNodes(g)])
#names(z) <- nodes(g)
#nAttrs <- list()
#nAttrs$label <- z
# updated plots
#plot(g, nodeAttrs=nAttrs)
#plot(g, attrs=list(node=list(fillcolor="blue"),edge=list(color="blue"),graph=list(rankdir="LR")))
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=5,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","mes", "semana", "dia", "produto", "feriado", "tipo venda", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
#Treinamento
#O algoritmo EM ? usado para encontrar a m?xima probabilidade de par?metros
# de modelos estat?sticos com base em dados n?o observados.
#Expectation-Maximization (EM) Algorithm
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Tabela de Probabilidade DiaSemana - Tipo de Venda
#print(fittedbn$descricaoDiaSemana)
#print(fittedbn$quantidadeIntervalo)
#Inferencia
# Qual ? a chance - > Evidencia
# de ocorrer o evento
#Qual ? chance de em Janeiro,
a <- cpquery(fittedbn,
event = (quantidade>0 & quantidade <15),
evidence = (mes=="1" & indiceSemana=="4" & descricaoDiaSemana=="Domingo"  &  codGrupoVenda=="4" & codTipoVenda=="1" ) )
percentual = a * 100
percentual
library(bnlearn)
library(forecast)
#source("http://bioconductor.org/biocLite.R")
#biocLite("Rgraphviz")
library(Rgraphviz)
#Limpar
dev.off(dev.list()["RStudioGD"])
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
test.set = movimentacao[1:69000, c("quantidade", "mes", "indiceSemana", "descricaoDiaSemana", "produto", "feriado", "codTipoVenda", "codGrupoVenda")]
## define variables as factors
test.set$diaSemana = as.factor(test.set$diaSemana)
test.set$mes = as.factor(test.set$mes)
test.set$indiceSemana = as.factor(test.set$indiceSemana)
test.set$codTipoVenda = as.factor(test.set$codTipoVenda)
test.set$codGrupoVenda = as.factor(test.set$codGrupoVenda)
#test.set$quantidade = as.factor(test.set$quantidade)
bn_df <- data.frame(test.set)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- mmhc(bn_df)
g <- graphviz.plot(res)
#defAttrs <- getDefaultAttrs()
#defAttrs
#z <- paste0("newlab_", letters[1:numNodes(g)])
#names(z) <- nodes(g)
#nAttrs <- list()
#nAttrs$label <- z
# updated plots
#plot(g, nodeAttrs=nAttrs)
#plot(g, attrs=list(node=list(fillcolor="blue"),edge=list(color="blue"),graph=list(rankdir="LR")))
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=5,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","mes", "semana", "dia", "produto", "feriado", "tipo venda", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
#Treinamento
#O algoritmo EM ? usado para encontrar a m?xima probabilidade de par?metros
# de modelos estat?sticos com base em dados n?o observados.
#Expectation-Maximization (EM) Algorithm
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Tabela de Probabilidade DiaSemana - Tipo de Venda
#print(fittedbn$descricaoDiaSemana)
#print(fittedbn$quantidadeIntervalo)
#Inferencia
# Qual ? a chance - > Evidencia
# de ocorrer o evento
#Qual ? chance de em Janeiro,
a <- cpquery(fittedbn,
event = (quantidade>0 & quantidade <15),
evidence = (mes=="1" & indiceSemana=="4" & descricaoDiaSemana=="Domingo"  &  codGrupoVenda=="4" & codTipoVenda=="1" ) )
percentual = a * 100
percentual
library(bnlearn)
library(forecast)
#source("http://bioconductor.org/biocLite.R")
#biocLite("Rgraphviz")
library(Rgraphviz)
#Limpar
dev.off(dev.list()["RStudioGD"])
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
test.set = movimentacao[1:69000, c("quantidade", "mes", "indiceSemana", "descricaoDiaSemana", "produto", "feriado", "codTipoVenda", "codGrupoVenda")]
## define variables as factors
test.set$diaSemana = as.factor(test.set$diaSemana)
test.set$mes = as.factor(test.set$mes)
test.set$indiceSemana = as.factor(test.set$indiceSemana)
test.set$codTipoVenda = as.factor(test.set$codTipoVenda)
test.set$codGrupoVenda = as.factor(test.set$codGrupoVenda)
#test.set$quantidade = as.factor(test.set$quantidade)
bn_df <- data.frame(test.set)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bn_df)
g <- graphviz.plot(res)
#defAttrs <- getDefaultAttrs()
#defAttrs
#z <- paste0("newlab_", letters[1:numNodes(g)])
#names(z) <- nodes(g)
#nAttrs <- list()
#nAttrs$label <- z
# updated plots
#plot(g, nodeAttrs=nAttrs)
#plot(g, attrs=list(node=list(fillcolor="blue"),edge=list(color="blue"),graph=list(rankdir="LR")))
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=5,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","mes", "semana", "dia", "produto", "feriado", "tipo venda", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
#Treinamento
#O algoritmo EM ? usado para encontrar a m?xima probabilidade de par?metros
# de modelos estat?sticos com base em dados n?o observados.
#Expectation-Maximization (EM) Algorithm
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Tabela de Probabilidade DiaSemana - Tipo de Venda
#print(fittedbn$descricaoDiaSemana)
#print(fittedbn$quantidadeIntervalo)
#Inferencia
# Qual ? a chance - > Evidencia
# de ocorrer o evento
#Qual ? chance de em Janeiro,
a <- cpquery(fittedbn,
event = (quantidade>0 & quantidade <15),
evidence = (mes=="1" & indiceSemana=="4" & descricaoDiaSemana=="Domingo"  &  codGrupoVenda=="4" & codTipoVenda=="1" ) )
percentual = a * 100
percentual
