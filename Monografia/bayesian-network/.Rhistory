summary(modelo)
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
summary(dataOxigenio)
summary(dataOxigenio)
var(dataOxigenio)
sd(dataOxigenio)
sd(dataOxigenio)
var(dataOxigenio)
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
#Estatística Descritiva
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
#Teste de correlao - Coeficiente de correlacao de Pearson
cor.test(dataOxigenio$tempo,dataOxigenio$oxigenio)
#----------------------------------------
# DIAGRAMA DE DISPERSAO
#----------------------------------------
plot(tempo,oxigenio,xlab="Tempo",ylab="Oxigenio")
points(mean(tempo), mean(oxigenio),col="red",lwd=5,lty=9)
#----------------------------------------
# AJUSTE NO MODELO
#----------------------------------------
#Modelo Ajustado
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
#----------------------------------------
# ANALISE DO MODELO DE REGRESSAO
#----------------------------------------
predict(modelo)  # valores preditos pela equacao de regressao
residuals(modelo) # valores residuos
#Verificando Normalidade dos residuos
shapiro.test(residuals(modelo))
#----------------------------------------
#ANALISE DE RESIDUOS
#----------------------------------------
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Residuos")
abline(h=0)
plot(tempo,residuals(modelo),xlab="tempo",ylab="Residuos")
abline(h=0)
qqnorm(residuals(modelo), ylab="Residuos")
qqline(residuals(modelo))
#----------------------------------------
#----------------------------------------
# GRAFICO DE REGRESAO
#----------------------------------------
plot(tempo ~ oxigenio)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
modelo = lm(tempo ~ oxigenio)
modelo
#----------------------------------------
# Robson Fernandes da Silva <robson.fernandes@usp.br>
# N. USP - 10107495
# Trabalho - Regressão Linear
#----------------------------------------
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
#----------------------------------------
# ESTATISTICA DESCRITIVA
#----------------------------------------
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
#Teste de correlao - Coeficiente de correlacao de Pearson
cor.test(dataOxigenio$tempo,dataOxigenio$oxigenio)
#----------------------------------------
# DIAGRAMA DE DISPERSAO
#----------------------------------------
plot(tempo,oxigenio,xlab="Tempo",ylab="Oxigenio")
points(mean(tempo), mean(oxigenio),col="red",lwd=5,lty=9)
#----------------------------------------
# AJUSTE NO MODELO
#----------------------------------------
#Modelo Ajustado
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
#----------------------------------------
# ANALISE DO MODELO DE REGRESSAO
#----------------------------------------
predict(modelo)  # valores preditos pela equacao de regressao
residuals(modelo) # valores residuos
#Verificando Normalidade dos residuos
shapiro.test(residuals(modelo))
#----------------------------------------
#ANALISE DE RESIDUOS
#----------------------------------------
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Residuos")
abline(h=0)
plot(tempo,residuals(modelo),xlab="tempo",ylab="Residuos")
abline(h=0)
qqnorm(residuals(modelo), ylab="Residuos")
qqline(residuals(modelo))
#----------------------------------------
#----------------------------------------
# GRAFICO DE REGRESAO
#----------------------------------------
plot(tempo ~ oxigenio)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
setwd("~/Desktop/Movimentacao")
hist(x)
x <- rnorm(1000)
hist(x)
#Load support vector library
library (e1071)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
hist(movimentacao$quantidade)
#Load support vector library
library (e1071)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
movimentacao$quantidade <- rnorm(movimentacao$quantidade)
hist(movimentacao$quantidade)
#Load support vector library
library (e1071)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
movimentacao$quantidadeNormal <- rnorm(movimentacao$quantidade)
View(movimentacao)
#Load support vector library
library (e1071)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
#Distribuição Gaussiana
movimentacao$quantidadeNormal <- rnorm(movimentacao$quantidade)
hist(movimentacao$quantidade)
#Load support vector library
library (e1071)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
m <- mean(movimentacao$quantidade)
sd <- sd(movimentacao$quantidade)
#Distribuição Gaussiana
movimentacao$quantidadeNormal <- rnorm(movimentacao$quantidade, m, sd)
hist(movimentacao$quantidade)
#Load support vector library
library (e1071)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
m <- mean(movimentacao$quantidade)
sd <- sd(movimentacao$quantidade)
#Distribuição Gaussiana
movimentacao$quantidadeNormal <- rnorm(movimentacao$quantidade, m, sd)
hist(movimentacao$quantidadeNormal)
View(movimentacao)
#Load support vector library
library (e1071)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
m <- mean(movimentacao$quantidade)
sd <- sd(movimentacao$quantidade)
#Distribuição Gaussiana
movimentacao$quantidadeNormal <- rnorm(movimentacao$quantidade)
hist(movimentacao$quantidadeNormal)
View(movimentacao)
install.packages("discretization")
install.packages("arules")
library(arules)
data1 <- sample(1:30,100,replace = T)
res <- discretize(data1,categories = 3)
class(data1)
library(arules)
data1 <- sample(1:30,100,replace = T)
res <- discretize(data1,categories = 3)
res
class(data1)
#Load support vector library
library (e1071)
library(arules)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
res <- discretize(movimentacao$quantidade,categories = 3)
#Load support vector library
library (e1071)
library(arules)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
res <- discretize(movimentacao$quantidade,categories = 3)
res
#Load support vector library
library (e1071)
library(arules)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
res <- discretize(movimentacao$quantidade,categories = 10)
res
#Load support vector library
library (e1071)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
library (e1071)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
for (m in movimentacao){
if (m$quantidade > 0 & m$quantidade <=10) m$quantidadeCategorico <- "0-10"
if (m$quantidade > 10 & m$quantidade <=20) m$quantidadeCategorico <- "10-20"
if (m$quantidade > 20 & m$quantidade <=30) m$quantidadeCategorico <- "20-30"
if (m$quantidade > 30 & m$quantidade <=40) m$quantidadeCategorico <- "30-40"
}
#Load support vector library
library (e1071)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
nRows <- nrow(movimentacao)
for(i in 1:nRows){
print(movimentacao[i,"quantidade"])
}
#Load support vector library
library (e1071)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
attach(movimentacao)
nRows <- nrow(movimentacao)
for(i in 1:nRows){
if (movimentacao[i,"quantidade"] > 0 & movimentacao[i,"quantidade"] <=10) movimentacao[i,"quantidadeCategorico"] <- "0-10"
if (movimentacao[i,"quantidade"] > 10 & movimentacao[i,"quantidade"] <=20) movimentacao[i,"quantidadeCategorico"] <- "10-20"
if (movimentacao[i,"quantidade"] > 20 & movimentacao[i,"quantidade"] <=30) movimentacao[i,"quantidadeCategorico"] <- "20-30"
if (movimentacao[i,"quantidade"] > 30 & movimentacao[i,"quantidade"] <=40) movimentacao[i,"quantidadeCategorico"] <- "30-40"
}
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
nRows <- nrow(movimentacao)
for(i in 1:nRows){
if (movimentacao[i,"quantidade"] > 0 & movimentacao[i,"quantidade"] <=10) movimentacao[i,"quantidadeCategorico"] <- "0-10"
if (movimentacao[i,"quantidade"] > 10 & movimentacao[i,"quantidade"] <=20) movimentacao[i,"quantidadeCategorico"] <- "10-20"
if (movimentacao[i,"quantidade"] > 20 & movimentacao[i,"quantidade"] <=30) movimentacao[i,"quantidadeCategorico"] <- "20-30"
if (movimentacao[i,"quantidade"] > 30 & movimentacao[i,"quantidade"] <=40) movimentacao[i,"quantidadeCategorico"] <- "30-40"
}
library(bnlearn)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
nRows <- nrow(movimentacao)
for(i in 1:nRows){
if (movimentacao[i,"quantidade"] > 0 & movimentacao[i,"quantidade"] <=10) movimentacao[i,"quantidadeCategorico"] <- "0-10"
if (movimentacao[i,"quantidade"] > 10 & movimentacao[i,"quantidade"] <=20) movimentacao[i,"quantidadeCategorico"] <- "10-20"
if (movimentacao[i,"quantidade"] > 20 & movimentacao[i,"quantidade"] <=30) movimentacao[i,"quantidadeCategorico"] <- "20-30"
if (movimentacao[i,"quantidade"] > 30 & movimentacao[i,"quantidade"] <=40) movimentacao[i,"quantidadeCategorico"] <- "30-40"
}
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao)
#Criacao da Rede
#
# Algoritmo um hibrido MMHC (Max-Min Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bnMovimentacao)
plot(res)
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao)
#Criacao da Rede
#
# Algoritmo um hibrido MMHC (Max-Min Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bnMovimentacao)
plot(res)
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao[1:1000,c("quantidadeCategorico","diaSemana", "codTipoVenda")])
#Criacao da Rede
res <- hc(bnMovimentacao)
plot(res)
View(bnMovimentacao)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
nRows <- nrow(movimentacao)
for(i in 1:nRows){
if (movimentacao[i,"quantidade"] > 0 & movimentacao[i,"quantidade"] <=10) movimentacao[i,"quantidadeCategorico"] <- "0-10"
else if (movimentacao[i,"quantidade"] > 10 & movimentacao[i,"quantidade"] <=20) movimentacao[i,"quantidadeCategorico"] <- "10-20"
else if (movimentacao[i,"quantidade"] > 20 & movimentacao[i,"quantidade"] <=30) movimentacao[i,"quantidadeCategorico"] <- "20-30"
else if (movimentacao[i,"quantidade"] > 30 & movimentacao[i,"quantidade"] <=40) movimentacao[i,"quantidadeCategorico"] <- "30-40"
else if (movimentacao[i,"quantidade"] > 40 & movimentacao[i,"quantidade"] <=50) movimentacao[i,"quantidadeCategorico"] <- "40-50"
else if (movimentacao[i,"quantidade"] > 50 & movimentacao[i,"quantidade"] <=60) movimentacao[i,"quantidadeCategorico"] <- "50-60"
else if (movimentacao[i,"quantidade"] > 60 & movimentacao[i,"quantidade"] <=70) movimentacao[i,"quantidadeCategorico"] <- "60-70"
else
movimentacao[i,"quantidadeCategorico"] <- "outro"
}
attach(movimentacao)
movimentacao = read.table('movimentacao.csv', header=TRUE, sep=";")
nRows <- nrow(movimentacao)
for(i in 1:nRows){
if (movimentacao[i,"quantidade"] > 0 & movimentacao[i,"quantidade"] <=10) movimentacao[i,"quantidadeCategorico"] <- "0-10"
else if (movimentacao[i,"quantidade"] > 10 & movimentacao[i,"quantidade"] <=20) movimentacao[i,"quantidadeCategorico"] <- "10-20"
else if (movimentacao[i,"quantidade"] > 20 & movimentacao[i,"quantidade"] <=30) movimentacao[i,"quantidadeCategorico"] <- "20-30"
else if (movimentacao[i,"quantidade"] > 30 & movimentacao[i,"quantidade"] <=40) movimentacao[i,"quantidadeCategorico"] <- "30-40"
else if (movimentacao[i,"quantidade"] > 40 & movimentacao[i,"quantidade"] <=50) movimentacao[i,"quantidadeCategorico"] <- "40-50"
else if (movimentacao[i,"quantidade"] > 50 & movimentacao[i,"quantidade"] <=60) movimentacao[i,"quantidadeCategorico"] <- "50-60"
else if (movimentacao[i,"quantidade"] > 60 & movimentacao[i,"quantidade"] <=70) movimentacao[i,"quantidadeCategorico"] <- "60-70"
else
movimentacao[i,"quantidadeCategorico"] <- "outro"
}
m = read.table('movimentacao.csv', header=TRUE, sep=";")
movimentacao = m[1,10000]
nRows <- nrow(movimentacao)
for(i in 1:nRows){
if (movimentacao[i,"quantidade"] > 0 & movimentacao[i,"quantidade"] <=10) movimentacao[i,"quantidadeCategorico"] <- "0-10"
else if (movimentacao[i,"quantidade"] > 10 & movimentacao[i,"quantidade"] <=20) movimentacao[i,"quantidadeCategorico"] <- "10-20"
else if (movimentacao[i,"quantidade"] > 20 & movimentacao[i,"quantidade"] <=30) movimentacao[i,"quantidadeCategorico"] <- "20-30"
else if (movimentacao[i,"quantidade"] > 30 & movimentacao[i,"quantidade"] <=40) movimentacao[i,"quantidadeCategorico"] <- "30-40"
else if (movimentacao[i,"quantidade"] > 40 & movimentacao[i,"quantidade"] <=50) movimentacao[i,"quantidadeCategorico"] <- "40-50"
else if (movimentacao[i,"quantidade"] > 50 & movimentacao[i,"quantidade"] <=60) movimentacao[i,"quantidadeCategorico"] <- "50-60"
else if (movimentacao[i,"quantidade"] > 60 & movimentacao[i,"quantidade"] <=70) movimentacao[i,"quantidadeCategorico"] <- "60-70"
else
movimentacao[i,"quantidadeCategorico"] <- "outro"
}
attach(movimentacao)
m = read.table('movimentacao.csv', header=TRUE, sep=";")
movimentacao = m[1,10000]
nRows <- nrow(movimentacao)
for(i in 1:nRows){
if (movimentacao[i,"quantidade"] > 0 & movimentacao[i,"quantidade"] <=10) movimentacao[i,"quantidadeCategorico"] <- "0-10"
else if (movimentacao[i,"quantidade"] > 10 & movimentacao[i,"quantidade"] <=20) movimentacao[i,"quantidadeCategorico"] <- "10-20"
else if (movimentacao[i,"quantidade"] > 20 & movimentacao[i,"quantidade"] <=30) movimentacao[i,"quantidadeCategorico"] <- "20-30"
else if (movimentacao[i,"quantidade"] > 30 & movimentacao[i,"quantidade"] <=40) movimentacao[i,"quantidadeCategorico"] <- "30-40"
else if (movimentacao[i,"quantidade"] > 40 & movimentacao[i,"quantidade"] <=50) movimentacao[i,"quantidadeCategorico"] <- "40-50"
else if (movimentacao[i,"quantidade"] > 50 & movimentacao[i,"quantidade"] <=60) movimentacao[i,"quantidadeCategorico"] <- "50-60"
else if (movimentacao[i,"quantidade"] > 60 & movimentacao[i,"quantidade"] <=70) movimentacao[i,"quantidadeCategorico"] <- "60-70"
else
movimentacao[i,"quantidadeCategorico"] <- "outro"
}
attach(movimentacao)
m = read.table('movimentacao.csv', header=TRUE, sep=";")
movimentacao = m[1,10000]
m = read.table('movimentacao.csv', header=TRUE, sep=";")
movimentacao = m[1:10000]
nRows <- nrow(movimentacao)
for(i in 1:nRows){
if (movimentacao[i,"quantidade"] > 0 & movimentacao[i,"quantidade"] <=10) movimentacao[i,"quantidadeCategorico"] <- "0-10"
else if (movimentacao[i,"quantidade"] > 10 & movimentacao[i,"quantidade"] <=20) movimentacao[i,"quantidadeCategorico"] <- "10-20"
else if (movimentacao[i,"quantidade"] > 20 & movimentacao[i,"quantidade"] <=30) movimentacao[i,"quantidadeCategorico"] <- "20-30"
else if (movimentacao[i,"quantidade"] > 30 & movimentacao[i,"quantidade"] <=40) movimentacao[i,"quantidadeCategorico"] <- "30-40"
else if (movimentacao[i,"quantidade"] > 40 & movimentacao[i,"quantidade"] <=50) movimentacao[i,"quantidadeCategorico"] <- "40-50"
else if (movimentacao[i,"quantidade"] > 50 & movimentacao[i,"quantidade"] <=60) movimentacao[i,"quantidadeCategorico"] <- "50-60"
else if (movimentacao[i,"quantidade"] > 60 & movimentacao[i,"quantidade"] <=70) movimentacao[i,"quantidadeCategorico"] <- "60-70"
else
movimentacao[i,"quantidadeCategorico"] <- "outro"
}
attach(movimentacao)
m = read.table('movimentacao.csv', header=TRUE, sep=";")
movimentacao = m[1:10000]
m = read.table('movimentacao.csv', header=TRUE, sep=";")
movimentacao = m[1:10000,]
m = read.table('movimentacao.csv', header=TRUE, sep=";")
movimentacao = m[1:10000,]
nRows <- nrow(movimentacao)
for(i in 1:nRows){
if (movimentacao[i,"quantidade"] > 0 & movimentacao[i,"quantidade"] <=10) movimentacao[i,"quantidadeCategorico"] <- "0-10"
else if (movimentacao[i,"quantidade"] > 10 & movimentacao[i,"quantidade"] <=20) movimentacao[i,"quantidadeCategorico"] <- "10-20"
else if (movimentacao[i,"quantidade"] > 20 & movimentacao[i,"quantidade"] <=30) movimentacao[i,"quantidadeCategorico"] <- "20-30"
else if (movimentacao[i,"quantidade"] > 30 & movimentacao[i,"quantidade"] <=40) movimentacao[i,"quantidadeCategorico"] <- "30-40"
else if (movimentacao[i,"quantidade"] > 40 & movimentacao[i,"quantidade"] <=50) movimentacao[i,"quantidadeCategorico"] <- "40-50"
else if (movimentacao[i,"quantidade"] > 50 & movimentacao[i,"quantidade"] <=60) movimentacao[i,"quantidadeCategorico"] <- "50-60"
else if (movimentacao[i,"quantidade"] > 60 & movimentacao[i,"quantidade"] <=70) movimentacao[i,"quantidadeCategorico"] <- "60-70"
else
movimentacao[i,"quantidadeCategorico"] <- "outro"
}
attach(movimentacao)
View(movimentacao)
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao[1:1000,c("quantidadeCategorico","diaSemana", "codTipoVenda")])
#Criacao da Rede
res <- hc(bnMovimentacao)
plot(res)
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao[1:1000,c("quantidadeCategorico","diaSemana", "codTipoVenda")])
#Criacao da Rede
res <- hc(bnMovimentacao)
plot(res)
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao[1:1000,c("quantidadeCategorico","diaSemana", "codTipoVenda")])
#Criacao da Rede
res <- hc(bnMovimentacao)
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao[1:1000,c("quantidadeCategorico","diaSemana", "codTipoVenda")])
bnMovimentacao$quantidadeCategorico <- as.factor(bnMovimentacao$quantidadeCategorico)
#Criacao da Rede
res <- hc(bnMovimentacao)
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao[1:1000,c("quantidadeCategorico","diaSemana", "codTipoVenda")])
bnMovimentacao$quantidadeCategorico <- as.factor(bnMovimentacao$quantidadeCategorico)
bnMovimentacao$diaSemana <- as.factor(bnMovimentacao$diaSemana)
bnMovimentacao$codTipoVenda <- as.factor(bnMovimentacao$codTipoVenda)
#Criacao da Rede
res <- hc(bnMovimentacao)
plot(res)
m = read.table('movimentacao.csv', header=TRUE, sep=";")
movimentacao = m[1:100000,]
nRows <- nrow(movimentacao)
for(i in 1:nRows){
if (movimentacao[i,"quantidade"] > 0 & movimentacao[i,"quantidade"] <=10) movimentacao[i,"quantidadeCategorico"] <- "0-10"
else if (movimentacao[i,"quantidade"] > 10 & movimentacao[i,"quantidade"] <=20) movimentacao[i,"quantidadeCategorico"] <- "10-20"
else if (movimentacao[i,"quantidade"] > 20 & movimentacao[i,"quantidade"] <=30) movimentacao[i,"quantidadeCategorico"] <- "20-30"
else if (movimentacao[i,"quantidade"] > 30 & movimentacao[i,"quantidade"] <=40) movimentacao[i,"quantidadeCategorico"] <- "30-40"
else if (movimentacao[i,"quantidade"] > 40 & movimentacao[i,"quantidade"] <=50) movimentacao[i,"quantidadeCategorico"] <- "40-50"
else if (movimentacao[i,"quantidade"] > 50 & movimentacao[i,"quantidade"] <=60) movimentacao[i,"quantidadeCategorico"] <- "50-60"
else if (movimentacao[i,"quantidade"] > 60 & movimentacao[i,"quantidade"] <=70) movimentacao[i,"quantidadeCategorico"] <- "60-70"
else
movimentacao[i,"quantidadeCategorico"] <- "outro"
}
attach(movimentacao)
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao[1:1000,c("quantidadeCategorico","diaSemana", "codTipoVenda")])
bnMovimentacao$quantidadeCategorico <- as.factor(bnMovimentacao$quantidadeCategorico)
bnMovimentacao$diaSemana <- as.factor(bnMovimentacao$diaSemana)
bnMovimentacao$codTipoVenda <- as.factor(bnMovimentacao$codTipoVenda)
#Criacao da Rede
res <- hc(bnMovimentacao)
plot(res)
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao[1:100000,c("quantidadeCategorico","diaSemana", "codTipoVenda")])
bnMovimentacao$quantidadeCategorico <- as.factor(bnMovimentacao$quantidadeCategorico)
bnMovimentacao$diaSemana <- as.factor(bnMovimentacao$diaSemana)
bnMovimentacao$codTipoVenda <- as.factor(bnMovimentacao$codTipoVenda)
#Criacao da Rede
res <- hc(bnMovimentacao)
plot(res)
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao[1:100000,c("quantidadeCategorico","diaSemana", "codTipoVenda")])
bnMovimentacao$quantidadeCategorico <- as.factor(bnMovimentacao$quantidadeCategorico)
bnMovimentacao$diaSemana            <- as.factor(bnMovimentacao$diaSemana)
bnMovimentacao$codTipoVenda         <- as.factor(bnMovimentacao$codTipoVenda)
#Criacao da Rede
res <- hc(bnMovimentacao)
plot(res)
library(bnlearn)
bnMovimentacao <- data.frame(movimentacao[1:100000,c("quantidadeCategorico","diaSemana", "codTipoVenda")])
bnMovimentacao$quantidadeCategorico <- as.factor(bnMovimentacao$quantidadeCategorico)
bnMovimentacao$diaSemana            <- as.factor(bnMovimentacao$diaSemana)
bnMovimentacao$codTipoVenda         <- as.factor(bnMovimentacao$codTipoVenda)
#Criacao da Rede
res <- hc(bnMovimentacao)
res
View(m)
# Load package
library(networkD3)
# Create fake data
src <- c("Saida de Produtos", "Saida de Produtos","Dia Semana", "Dia Semana")
target <- c("Dia Semana", "Clima", "Feriado", "Salario")
networkData <- data.frame(src, target)
# Plot
simpleNetwork(networkData,
zoom=T)
# Load package
library(networkD3)
# Create fake data
src <- c("Saida de Produtos", "Saida de Produtos","Dia Semana", "Dia Semana")
target <- c("Dia Semana", "Clima", "Feriado", "Salario")
networkData <- data.frame(src, target)
# Plot
simpleNetwork(networkData,
zoom=T)
# Subsídio
src <- c("Subsídio", "Colheito","Custo")
target <- c("Custo", "Custo", "Compra")
networkDataCusto <- data.frame(src, target)
# Plot
simpleNetwork(networkDataCusto,
zoom=T)
# Load package
library(networkD3)
# Create fake data
src <- c("Saida de Produtos", "Saida de Produtos","Dia Semana", "Dia Semana")
target <- c("Dia Semana", "Clima", "Feriado", "Salario")
networkData <- data.frame(src, target)
# Plot
simpleNetwork(networkData,
zoom=T)
# Subsídio
src <- c("Subsídio", "Colheito","Custo")
target <- c("Custo", "Custo", "Compra")
networkDataCusto <- data.frame(src, target)
# Plot
simpleNetwork(networkDataCusto,
zoom=T)
# Load package
library(networkD3)
# Create fake data
src <- c("Saida de Produtos", "Saida de Produtos","Dia Semana", "Dia Semana")
target <- c("Dia Semana", "Clima", "Feriado", "Salario")
networkData <- data.frame(src, target)
# Plot
simpleNetwork(networkData,
zoom=T)
# Subsídio
src <- c("Subsidio", "Colheito","Custo")
target <- c("Custo", "Custo", "Compra")
networkDataCusto <- data.frame(src, target)
# Plot
simpleNetwork(networkDataCusto,
zoom=T)
